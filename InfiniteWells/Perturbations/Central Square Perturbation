{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import various libraries, which will be used later\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import quad\n",
    "from ipywidgets import interact, fixed\n",
    "import ipywidgets as widgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "L = 10**(-10) #width of the infinite well\n",
    "A = np.sqrt(2 / L) # normalisation constant\n",
    "w = 0.2 * L #width of the central square perturbation\n",
    "\n",
    "m = 9.11 * 10**(-31) #Particle mass in Kg (in this case mass of an electron)\n",
    "e = 1.6 * 10**(-19) #an electron volt\n",
    "hbar = (6.626 * 10**(-34)) / (2 * np.pi) #Planck's constant divided by 2Pi\n",
    "\n",
    "N = 100 #number of x-positions over which we will sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def energy(n):\n",
    "    \"\"\"\n",
    "    Function to calculate the energy of the particle in an infinite \n",
    "    potential well in a particular quantum state\n",
    "    \n",
    "    Returns:\n",
    "        energy : float\n",
    "                 the energy of the particle\n",
    "                 \n",
    "    Parameter:\n",
    "        n : integer\n",
    "            the state of the wavefunction\n",
    "    \"\"\"\n",
    "    \n",
    "    energy = (n**2 * (np.pi)**2 * (hbar**2)) / (2 * m * L**2)\n",
    "    return energy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def unperturbed(n, x):\n",
    "    \"\"\"\n",
    "    Function to calculate the value of the wavefunction at a given point in the infinite potential well\n",
    "    \n",
    "    Returns:\n",
    "        psi : float\n",
    "              the value of the wavefunction\n",
    "        \n",
    "    Parameters:\n",
    "        n : integer\n",
    "            the order of the wavefunction\n",
    "            \n",
    "        x : float\n",
    "            the position of the particle in the infinite potential well\n",
    "    \"\"\"\n",
    "    \n",
    "    psi = A * np.sin((n * np.pi * x) / L) #the solution to the unperturbed wavefunction in an infinite potential well\n",
    "    return psi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def integral(k, n, V, w):\n",
    "    \"\"\"\n",
    "    Function to calculate individual integrals, which will later be summed when finding the first-order\n",
    "    correction to the wavefunction.\n",
    "    \n",
    "    Returns:\n",
    "        perturb_1 : float\n",
    "        \n",
    "    Parameters:\n",
    "        k : integer\n",
    "            dummy variable. represents the principle quantum number and is what we will sum over in a later function\n",
    "        \n",
    "        n : integer\n",
    "            principle quantum number\n",
    "            \n",
    "        V : float\n",
    "            magnitude of the square perturbation\n",
    "            \n",
    "        w : float\n",
    "            width of the central square pertubation\n",
    "    \"\"\"\n",
    "    \n",
    "    if w > L:\n",
    "        print (\"Perturbation width exceeds that of the infinite well. Reduce perturbation width.\")\n",
    "        \n",
    "    else:\n",
    "        def integrand(x):\n",
    "            \"\"\"\n",
    "            Function to establish the integrand to be used when calculating the perturbation. Must do this \n",
    "            as cannot square the 'solution' function which is previously defined\n",
    "            \"\"\"\n",
    "            \n",
    "            return (A * np.sin((n * np.pi * x) / L)) * (np.conj(A * np.sin((k * np.pi * x) / L))) * V\n",
    "        \n",
    "        perturb_1 = quad(integrand, L/2 - w/2, L/2 + w/2)\n",
    "        return perturb_1[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum_1(n, kmax, V, w):\n",
    "    \"\"\"\n",
    "    Function to store integral values which will later be used to find the value of the corrected wavefunction.\n",
    "    \n",
    "    Returns:\n",
    "        sum_1 : array\n",
    "                array containing coefficients which will be used to find the corrected wavefunction.\n",
    "        \n",
    "    Parameters:\n",
    "        n : integer\n",
    "            principle quantum number\n",
    "            \n",
    "        kmax : integer\n",
    "               value of the dummy variable up to which we will sample\n",
    "        \n",
    "        V : float\n",
    "            magnitude of the square perturbation\n",
    "        \n",
    "        w : float\n",
    "            width of the central square pertubation\n",
    "    \"\"\"\n",
    "    sum_1 = []\n",
    "    \n",
    "    for i in range(1, kmax + 1):\n",
    "        if i == n:\n",
    "            sum_1 = np.append(sum_1, 0)\n",
    "        else:\n",
    "            value = integral(i, n, V, w) / (energy(n) - energy(i))\n",
    "            sum_1 = np.append(sum_1, value)\n",
    "    \n",
    "    return sum_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def psi_correc(n, kmax, V, w):\n",
    "    new_psi = [] #empty array to store (first-order) corrected wavefunctions\n",
    "    \n",
    "    for x in np.arange(0, L, L / N):\n",
    "        value = 0\n",
    "        \n",
    "        for i in range(1, kmax + 1):\n",
    "            value += (sum_1(n, kmax, V, w)[i - 1] * unperturbed(i, x))\n",
    "        \n",
    "        new_psi = np.append(new_psi, value + unperturbed(n, x))\n",
    "    \n",
    "    return new_psi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "67f4644572f4439e9d560c7f7f0634f2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=2, description='n', max=3, min=1), FloatSlider(value=5000.0, descriptionâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact(n = (1, 3, 1), kmax = fixed(10), V = (0.0, 1e4, 1e3), w = (0.0, L * 1e10, 0.1))\n",
    "def plot_psi(n, kmax, V, w):\n",
    "    x_pos = np.linspace(0, L, N)\n",
    "    \n",
    "    #set the size of the figures\n",
    "    fig = plt.figure(figsize = (8, 9))\n",
    "    \n",
    "    ax = fig.add_subplot(111)\n",
    "     \n",
    "    #general plot formatting\n",
    "    ax.plot(x_pos, psi_correc(n, kmax, V * e, w * L))\n",
    "    #ax.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.2e'))\n",
    "    \n",
    "    plt.xlabel('x-position')\n",
    "    plt.ylabel('Corrected wavefunction')\n",
    "    plt.title('n = %i, V = %.1e eV, w = %.2e Angstroms' %(n, V, w))\n",
    "    return plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def psi_vs_V(n, kmax, Vmax, Vinc, w):\n",
    "    psi = []\n",
    "    \n",
    "    for v in np.arange(0, Vmax, Vmax / Vinc):\n",
    "        new_psi = [] #empty array to store (first-order) corrected wavefunctions\n",
    "    \n",
    "        for x in np.arange(0, L, L / N):\n",
    "            value = 0\n",
    "        \n",
    "            for i in range(1, kmax + 1):\n",
    "                value += (sum_1(n, kmax, v, w)[i - 1] * unperturbed(i, x))\n",
    "        \n",
    "            new_psi.append(value + unperturbed(n, x))\n",
    "            \n",
    "        psi.append(new_psi)\n",
    "        \n",
    "    return psi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def psi_V_plot(n, kmax, Vmax, Vinc, w):\n",
    "    x = np.linspace(0, L / 10**(-10), N)\n",
    "    V = np.linspace(0, Vmax / e, Vinc)\n",
    "    \n",
    "    psi = psi_vs_V(n, kmax, Vmax, Vinc, w)\n",
    "    \n",
    "    plt.contourf(x, V, psi, 50)\n",
    "    plt.xlabel('x-position / Angstroms')\n",
    "    plt.ylabel('Perturbation magnitude / eV')\n",
    "    plt.title('Wavefunction magnitude for n = %i state as a \\n function of perturbation magnitude and x-position' %n)\n",
    "    plt.show()\n",
    "\n",
    "psi_V_plot(2, 10, 5000*e, 10, w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
